{"version":3,"sources":["components/navigation.jsx","components/chatbot/config.js","components/chatbot/MessageParser.js","components/chatbot/ActionProvider.js","components/header.jsx","components/features.jsx","components/about.jsx","components/footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Navigation","props","id","className","type","data-toggle","data-target","href","botName","GetConfig","authStatus","initialMessages","createChatBotMessage","customStyles","botMessageBox","backgroundColor","chatButton","state","MessageParser","actionProvider","this","message","includes","handleHello","handleJoke","handleCancer","handleColon","handleColonCancer","handleResult","handleUnknown","ActionProvider","createChatbotMessage","setStateFunc","createClientMessage","setState","prev","messages","a","axios","get","res","console","log","data","joke","message1","Header","React","useState","images","setImages","setdiag","config","onImageSend","index","post","JSON","stringify","headers","alert","bg","zIndex","position","top","title","paragraph","value","onChange","imageList","addUpdateIndex","maxNumber","dataURLKey","onImageUpload","onImageUpdate","onImageRemoveAll","onImageRemove","dragProps","isDragging","onClick","map","image","src","data_url","alt","width","style","bottom","right","messageParser","Features","d","i","icon","text","About","Footer","App","SmoothScroll","speed","speedAsDuration","landingPageData","setLandingPageData","useEffect","JsonData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.fea3da2e.chunk.js","sourcesContent":["export const Navigation = (props) => {\n  return (\n    <nav id=\"menu\" className=\"navbar navbar-default navbar-fixed-top\">\n      <div className=\"container\">\n        <div className=\"navbar-header\">\n          <button\n            type=\"button\"\n            className=\"navbar-toggle collapsed\"\n            data-toggle=\"collapse\"\n            data-target=\"#bs-example-navbar-collapse-1\"\n          >\n            {\" \"}\n            <span className=\"sr-only\">Toggle navigation</span>{\" \"}\n            <span className=\"icon-bar\"></span>{\" \"}\n            <span className=\"icon-bar\"></span>{\" \"}\n            <span className=\"icon-bar\"></span>{\" \"}\n          </button>\n          <a className=\"navbar-brand page-scroll\" href=\"#page-top\">\n            Awesome Medical Doctor\n          </a>{\" \"}\n        </div>\n\n        <div\n          className=\"collapse navbar-collapse\"\n          id=\"bs-example-navbar-collapse-1\"\n        >\n          <ul className=\"nav navbar-nav navbar-right\">\n            <li>\n              <a href=\"#features\" className=\"page-scroll\">\n                Features\n              </a>\n            </li>\n            <li>\n              <a href=\"#about\" className=\"page-scroll\">\n                About\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { createChatBotMessage } from 'react-chatbot-kit';\n\nconst botName = 'Dr. Smart';\n\n\nconst GetConfig = (authStatus) => {\n   return {\n     initialMessages: [createChatBotMessage(`Hi! I'm ${botName}, the smaertest chatbot in the room`), createChatBotMessage(`You can chat with me or upload a image to my left here`)],\n     botName: botName,\n     customStyles: {\n       botMessageBox: {\n         backgroundColor: '#376B7E',\n       },\n       chatButton: {\n         backgroundColor: '#5ccc9d',\n       },\n     },\n     state:{\n       authStatus: authStatus\n     }\n   };\n}\n\n\nexport default GetConfig;\n","// in MessageParser.js\nclass MessageParser {\n  constructor(actionProvider, state) {\n    this.actionProvider = actionProvider;\n    this.state = state;\n  }\n\n  parse(message) {\n    if (message.includes(\"hello\")) {\n      this.actionProvider.handleHello();\n    } else if (message.includes(\"joke\") || message.includes(\"funny\")) {\n      this.actionProvider.handleJoke();\n    } else if (message.includes(\"cancer\") && !message.includes(\"colon\")) {\n      this.actionProvider.handleCancer();\n    } else if (!message.includes(\"cancer\") && message.includes(\"colon\")) {\n      this.actionProvider.handleColon();\n    } else if (message.includes(\"cancer\") && message.includes(\"colon\")) {\n      this.actionProvider.handleColonCancer();\n    }else if (message.includes(\"diagnosis\")||message.includes(\"result\")) {\n      this.actionProvider.handleResult();\n    }else{\n      this.actionProvider.handleUnknown(this.state)\n    }\n  }\n}\n\nexport default MessageParser;\n","// in ActionProvider.js\nimport {\n  createChatBotMessage,\n  setStateFunc,\n  createClientMessage\n} from \"react-chatbot-kit\";\nimport axios from \"axios\";\nclass ActionProvider {\n  constructor(createChatbotMessage, setStateFunc, createClientMessage) {\n    this.createChatbotMessage = createChatbotMessage;\n    this.setState = setStateFunc;\n    this.createClientMessage = createClientMessage;\n  }\n\n  handleHello() {\n    var message = this.createChatbotMessage(\n      \"Hello. Nice to meet you. I am glad that you are here\"\n    );\n\n    this.setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message]\n    }));\n  }\n\n  async handleJoke() {\n    var res = await axios.get(\"https://v2.jokeapi.dev/joke/Any?type=single\");\n    console.log(res.data.joke);\n\n    var message = this.createChatbotMessage(res.data.joke);\n\n    this.setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message]\n    }));\n  }\n\n  handleCancer() {\n    var message = this.createChatbotMessage(\n      \"Cancer is a condition where cells in a specific part of the body grow and reproduce uncontrollably. The cancerous cells can invade and destroy surrounding healthy tissue, including organs. Cancer sometimes begins in one part of the body before spreading to other areas. This process is known as metastasis.\"\n    );\n\n    this.setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message]\n    }));\n  }\n\n  handleColonCancer() {\n    var message = this.createChatbotMessage(\n      \"Colon cancer typically affects older adults, though it can happen at any age. It usually begins as small, noncancerous (benign) clumps of cells called polyps that form on the inside of the colon. Over time some of these polyps can become colon cancers.\"\n    );\n    var message1 = this.createChatbotMessage(\n      \"Our site can help you diagnose colon cancer early, try to upload a image here\"\n    );\n    this.setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message, message1]\n    }));\n  }\n\n  handleColon() {\n    var message = this.createChatbotMessage(\n      \"The colon is also known as the large bowel or large intestine. It is an organ that is part of the digestive system (also called the digestive tract) in the human body. The digestive system is the group of organs that allow us to eat and to use the food we eat to fuel our bodies. \"\n    );\n\n    this.setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message]\n    }));\n  }\n\n  handleUnknown() {\n    var message = this.createChatbotMessage(\n      \"I do not really know how to respond, but maybe you can google it \"\n    );\n\n    this.setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message]\n    }));\n  }\n\n  handleResult() {\n    var message = this.createChatbotMessage(\"The results will be immediately shown via alert\");\n    this.setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message]\n    }));\n    // this.setState(prev => {\n    //   console.log(\n    //     prev.authStatus.setState(prev =>\n    //       prev\n    //     )\n    //   );\n    //   return {\n    //     ...prev,\n    //     messages: [...prev.messages, message]\n    //   };\n    // });\n  }\n}\n\nexport default ActionProvider;\n","import ParticlesBg from \"particles-bg\";\nimport React from \"react\";\nimport ImageUploading from \"react-images-uploading\";\nimport Chatbot from \"react-chatbot-kit\";\nimport GetConfig from \"./chatbot/config\";\nimport MessageParser from \"./chatbot/MessageParser\";\nimport ActionProvider from \"./chatbot/ActionProvider\";\nimport \"react-chatbot-kit/build/main.css\";\nimport axios from \"axios\";\n\nexport const Header = props => {\n  const [images, setImages] = React.useState([]);\n\n  const [diag, setdiag] = React.useState('');\n  const maxNumber = 5;\n  const onChange = (imageList, addUpdateIndex) => {\n    // data for submit\n    console.log(imageList, addUpdateIndex);\n    setImages(imageList);\n  };\n\n  var config = GetConfig(setdiag)\n  const onImageSend = async index => {\n    // data for submit\n    console.log(images[index]);\n    var res = await axios.post(\n      \"http://54.158.154.59/\",\n      JSON.stringify(images[index]),\n      {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n    console.log(res);\n    alert(res.data);\n    setdiag(res.data)\n    setImages([]);\n  };\n\n  return (\n    <header id=\"header\">\n      <div className=\"intro\">\n        <ParticlesBg\n          type=\"circle\"\n          bg={{\n            zIndex: 0,\n            position: \"absolute\",\n            top: 0\n          }}\n        />{\" \"}\n        <div className=\"overlay\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-8 col-md-offset-2 intro-text\">\n                <h1>\n                  {\" \"}\n                  {props.data ? props.data.title : \"Loading\"} <span> </span>{\" \"}\n                </h1>{\" \"}\n                <p> {props.data ? props.data.paragraph : \"Loading\"} </p>{\" \"}\n                <ImageUploading\n                  value={images}\n                  onChange={onChange}\n                  maxNumber={maxNumber}\n                  dataURLKey=\"data_url\"\n                >\n                  {({\n                    imageList,\n                    onImageUpload,\n                    onImageRemoveAll,\n                    onImageUpdate,\n                    onImageRemove,\n                    isDragging,\n                    dragProps\n                  }) => (\n                    // write your building UI\n                    <div className=\"upload__image-wrapper\">\n                      <button\n                        className=\"btn btn-custom btn-lg page-scroll\"\n                        onClick={onImageUpload}\n                        {...dragProps}\n                      >\n                        Upload Image Now\n                      </button>\n                      {imageList.map((image, index) => (\n                        <div key={index} className=\"image-item\">\n                          <img src={image.data_url} alt=\"\" width=\"100\" />\n                          <div className=\"image-item__btn-wrapper\">\n                            <button onClick={() => onImageUpdate(index)}>\n                              Update\n                            </button>\n                            <button onClick={() => onImageRemove(index)}>\n                              Remove\n                            </button>\n                            <button onClick={() => onImageSend(index)}>\n                              Send\n                            </button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </ImageUploading>\n                <div\n                  style={{\n                    position: \"fixed\",\n                    bottom: 0,\n                    right: 0\n                  }}\n                >\n                  <Chatbot\n                    config={config}\n                    messageParser={MessageParser}\n                    actionProvider={ActionProvider}\n                  />\n                </div>\n              </div>{\" \"}\n            </div>\n          </div>{\" \"}\n        </div>{\" \"}\n      </div>{\" \"}\n    </header>\n  );\n};\n","export const Features = (props) => {\n  return (\n    <div id='features' className='text-center'>\n      <div className='container'>\n        <div className='col-md-10 col-md-offset-1 section-title'>\n          <h2>Features</h2>\n        </div>\n        <div className='row'>\n          {props.data\n            ? props.data.map((d, i) => (\n                <div key={`${d.title}-${i}`} className='col-xs-6 col-md-3'>\n                  {' '}\n                  <i className={d.icon}></i>\n                  <h3>{d.title}</h3>\n                  <p>{d.text}</p>\n                </div>\n              ))\n            : 'Loading...'}\n        </div>\n      </div>\n    </div>\n  )\n}\n","export const About = (props) => {\n  return (\n    <div id=\"about\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-xs-12 col-md-6\">\n            {\" \"}\n            <img src=\"img/about.jpg\" className=\"img-responsive\" alt=\"\" />{\" \"}\n          </div>\n          <div className=\"col-xs-12 col-md-6\">\n            <div className=\"about-text\">\n              <h2>About Cancer</h2>\n              <p>{props.data ? props.data.paragraph : \"loading...\"}</p>\n              <h3>Keep it Healthy!</h3>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const Footer = (props) => {\n  return (\n    <div>\n      <div id=\"footer\">\n        <div className=\"container text-center\">\n          <p>&copy; 2021 MIT Research Group 3</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { Navigation } from \"./components/navigation\";\nimport { Header } from \"./components/header\";\nimport { Features } from \"./components/features\";\nimport { About } from \"./components/about\";\nimport { Services } from \"./components/services\";\nimport { Gallery } from \"./components/gallery\";\nimport { Testimonials } from \"./components/testimonials\";\nimport { Footer } from \"./components/footer\";\nimport JsonData from \"./data/data.json\";\nimport SmoothScroll from \"smooth-scroll\";\n\nexport const scroll = new SmoothScroll('a[href*=\"#\"]', {\n  speed: 1000,\n  speedAsDuration: true,\n});\n\nconst App = () => {\n  const [landingPageData, setLandingPageData] = useState({});\n  useEffect(() => {\n    setLandingPageData(JsonData);\n  }, []);\n\n  return (\n    <div>\n      <Navigation />\n      <Header data={landingPageData.Header} />\n      <Features data={landingPageData.Features} />\n      <About data={landingPageData.About} />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}